name: Main Flow

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Main - Build, Test And Release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build and Test
      run: mvn package

    - name: Determine Version Change
      run: |
        # Extract the commit message of the latest commit on the main branch
        COMMIT_MSG=$(git log -1 --pretty=format:%s)
        if [[ "$COMMIT_MSG" =~ (BREAKING CHANGE:|major:|major!) ]]; then
          echo "version_change=major" 
        elif [[ "$COMMIT_MSG" =~ (feat:|feat!) ]]; then
          echo "version_change=minor"
        else
          echo "version_change=patch"
        fi >> $GITHUB_OUTPUT

    - name: Increment Version
      run: |
        version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

        case "${{ env.version_change }}" in
          major) mvn release:prepare release:update-versions -DautoVersionSubmodules=true -DdevelopmentVersion=${nextMajor}-SNAPSHOT -B ;;
          minor) mvn release:prepare release:update-versions -DautoVersionSubmodules=true -DdevelopmentVersion=${nextMinor}-SNAPSHOT -B ;;
          *) mvn release:prepare release:update-versions -DautoVersionSubmodules=true -DdevelopmentVersion=${nextIncremental}-SNAPSHOT -B ;;
        esac
        new_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

    - name: Push Version Change
      run: |
        # Configure Git credentials using author's information from the latest commit on the main branch
        git config --global user.email "$(git log -1 --pretty=format:'%ae')"
        git config --global user.name "$(git log -1 --pretty=format:'%an')"
                
        # Commit the changes
        git commit -m "Updated version to ${new_version}" pom.xml
        git push origin main
        
        echo "Updated version to ${new_version}"
