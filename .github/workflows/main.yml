name: Main Flow

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Main - Build And Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn package

  release:
    name: Main - Release
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Determine Version Change
      id: determine_version_change
      run: |
        # Extract the commit message of the latest commit on the main branch
        COMMIT_MSG=$(git log -1 --pretty=format:%s)
        if [[ "$COMMIT_MSG" =~ (BREAKING CHANGE:|major:|major!) ]]; then
          echo "version_change=major" 
        elif [[ "$COMMIT_MSG" =~ (feat:|feat!) ]]; then
          echo "version_change=minor"
        else
          echo "version_change=patch"
        fi >> $GITHUB_OUTPUT

    - name: Increment Version
      run: |
        version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        case "${{ env.version_change }}" in
          major) mvn release:prepare release:update-versions -DautoVersionSubmodules=true -DdevelopmentVersion=nextMajor -B ;;
          minor) mvn release:prepare release:update-versions -DautoVersionSubmodules=true -DdevelopmentVersion=nextMinor -B ;;
          *) mvn release:prepare release:update-versions -DautoVersionSubmodules=true -DdevelopmentVersion=nextIncremental -B ;;
        esac

    - name: Push Version Change
      run: |
        # Configure Git credentials using author's information from the latest commit on the main branch
        git config --global user.email "$(git log -1 --pretty=format:'%ae')"
        git config --global user.name "$(git log -1 --pretty=format:'%an')"
                
        # Commit the changes
        git commit -m "Updated version to $NEW_VERSION" pom.xml
        git push
        
        echo "Updated pom.xml with version $NEW_VERSION"
